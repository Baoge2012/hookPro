//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSMutableDictionary, NSRecursiveLock;

@interface NWIPPolicy : NSObject
{
    NSRecursiveLock *_lock;	// 8 = 0x8
    NSMutableDictionary *_localDnsDict;	// 16 = 0x10
    NSMutableDictionary *_netSTDict;	// 24 = 0x18
    NSMutableDictionary *_failOverDict;	// 32 = 0x20
    NSMutableDictionary *_schemeList;	// 40 = 0x28
    NSMutableDictionary *_config;	// 48 = 0x30
    NSMutableDictionary *_headerCNameHost;	// 56 = 0x38
    NSMutableDictionary *_sslSchemeBlackList;	// 64 = 0x40
    NSMutableDictionary *_firstSSLList;	// 72 = 0x48
}

+ (long long)currentSeconds;
+ (_Bool)isWiFiNetwork:(id)arg1;
+ (void)checkDirIsCreated:(id)arg1;
+ (id)configFilePath;
+ (id)schemeFilePath;
+ (id)strategyDoc;
+ (void)checkStrategyDir;
+ (id)stratgyPathWithEnviroment;
+ (id)getLocalAmdcDnsDict;
+ (id)getLocalAcsDnsDict;
+ (id)loadLocalDnsCache;
+ (id)shareInstance;
@property(retain, nonatomic) NSMutableDictionary *firstSSLList; // @synthesize firstSSLList=_firstSSLList;
@property(retain, nonatomic) NSMutableDictionary *sslSchemeBlackList; // @synthesize sslSchemeBlackList=_sslSchemeBlackList;
@property(retain, nonatomic) NSMutableDictionary *headerCNameHost; // @synthesize headerCNameHost=_headerCNameHost;
@property(retain, nonatomic) NSMutableDictionary *config; // @synthesize config=_config;
@property(retain, nonatomic) NSMutableDictionary *schemeList; // @synthesize schemeList=_schemeList;
@property(retain, nonatomic) NSMutableDictionary *failOverDict; // @synthesize failOverDict=_failOverDict;
@property(retain, nonatomic) NSMutableDictionary *netSTDict; // @synthesize netSTDict=_netSTDict;
@property(retain, nonatomic) NSMutableDictionary *localDnsDict; // @synthesize localDnsDict=_localDnsDict;
- (void).cxx_destruct;
- (id)getNetTypeKey:(int)arg1;
- (id)getNetTypeKey;
- (void)unbindCName:(id)arg1;
- (void)bindCName:(id)arg1 headerCNameHost:(id)arg2;
- (id)getHeaderCNameHost:(id)arg1;
- (void)updateCName:(id)arg1 cname:(id)arg2;
- (void)updateConfig:(id)arg1 fcl:(id)arg2 fct:(id)arg3;
- (id)getDNSIP:(id)arg1;
- (void)resetFailOverRefreshTime:(id)arg1 policyId:(id)arg2;
- (void)failOverRefresh:(id)arg1 policyId:(id)arg2;
- (id)getLocalDNSIp:(id)arg1;
- (void)parseLocalDns:(id)arg1;
- (_Bool)validateFailAllPolicy:(id)arg1 policyId:(id)arg2;
- (id)getAllPolicyResult:(int)arg1;
- (id)getPolicyResult:(id)arg1 withNetStatus:(int)arg2 copyItems:(_Bool)arg3;
- (_Bool)filterMockModeHost:(id)arg1;
- (_Bool)hasSpdySuccessPolicy:(id)arg1;
- (_Bool)hasSpdyPolicy:(id)arg1;
- (_Bool)findPolicy:(id)arg1 withSuccessStatus:(_Bool)arg2;
- (id)cnameDictionary;
- (void)clearFlowControlBeginTime;
- (void)setFlowControlBeginTime:(_Bool)arg1;
- (long long)flowControlBegintime;
- (void)setFlowControlTime:(id)arg1;
- (int)flowControlTime;
- (void)setFlowControLevel:(id)arg1;
- (int)flowControlLevel:(_Bool)arg1;
- (void)setCv:(id)arg1;
- (unsigned int)cv;
- (id)scanSTFileByLRU:(id)arg1;
- (void)encodeArchiveFile:(id)arg1 file:(id)arg2;
- (id)decodeArchiveFile:(id)arg1;
- (id)curNetStrategyPath:(id)arg1;
- (void)loadConfig;
- (id)policyModel:(id)arg1;
- (void)loadSTWithNetType:(id)arg1;
- (void)loadSchemeST;
- (void)removeHostFromFirstSSLList:(id)arg1;
- (void)add2FirstSSLList:(id)arg1;
- (_Bool)hostInFirstSSLList:(id)arg1;
- (void)removeHostFromSSLSchemeBlackList:(id)arg1;
- (void)add2SSLSchemeBlackList:(id)arg1;
- (_Bool)hostInSSLSchemeBlackList:(id)arg1;
- (void)resetPolicyEnvironmentChanged;
- (void)clearPolicy;
- (void)asyncWritePolicyForCache;
- (void)writePolicyForCache;
- (void)eliminateSchemeList;
- (id)writePolicyExeResult:(id)arg1 withConnRT:(long long)arg2 withExeStatus:(int)arg3 withErrInfo:(id)arg4 raceTime:(long long)arg5;
- (void)refreshPolicy:(id)arg1 networkStatus:(int)arg2 internal:(_Bool)arg3;
- (void)refreshIPPolicy:(id)arg1 withStatus:(int)arg2;
- (void)refreshIPPolicys:(id)arg1 withStatus:(int)arg2;
- (void)loadInternalHotST:(id)arg1;
- (void)loadInternalST;
- (id)colletExpiredColdHosts:(id)arg1 modificationTime:(long long)arg2;
- (id)colletHotHosts:(id)arg1 modificationTime:(long long)arg2;
- (void)checkShouldFetchAMDC;
- (void)fetchStrategy:(id)arg1;
- (void)queryComplexPolicy:(id)arg1 force:(_Bool)arg2;
- (id)getCName:(id)arg1;
- (id)getCNameWithHost:(id)arg1;
- (id)getPolicySchemeWithHost:(id)arg1;
- (void)netTypeChange;
- (void)loadStrategy;
- (void)initStrategy;
- (void)dealloc;
- (id)init;

@end

