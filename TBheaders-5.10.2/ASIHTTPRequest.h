//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSOperation.h>

#import "NSCopying-Protocol.h"

@class ASIDataDecompressor, NSArray, NSData, NSDate, NSDictionary, NSError, NSInputStream, NSMutableArray, NSMutableData, NSMutableDictionary, NSNumber, NSOutputStream, NSRecursiveLock, NSString, NSTimer, NSURL;
@protocol ASICacheDelegate, ASIHTTPRequestDelegate, ASIHTTPRequestDelegate><ASIProgressDelegate, ASIProgressDelegate;

@interface ASIHTTPRequest : NSOperation <NSCopying>
{
    NSURL *url;	// 24 = 0x18
    NSURL *originalURL;	// 32 = 0x20
    NSURL *redirectURL;	// 40 = 0x28
    id <ASIHTTPRequestDelegate> delegate;	// 48 = 0x30
    id <ASIHTTPRequestDelegate><ASIProgressDelegate> queue;	// 56 = 0x38
    NSString *requestMethod;	// 64 = 0x40
    NSMutableData *postBody;	// 72 = 0x48
    NSData *compressedPostBody;	// 80 = 0x50
    _Bool shouldStreamPostDataFromDisk;	// 88 = 0x58
    NSString *postBodyFilePath;	// 96 = 0x60
    NSString *compressedPostBodyFilePath;	// 104 = 0x68
    _Bool didCreateTemporaryPostDataFile;	// 112 = 0x70
    NSOutputStream *postBodyWriteStream;	// 120 = 0x78
    NSInputStream *postBodyReadStream;	// 128 = 0x80
    NSMutableDictionary *requestHeaders;	// 136 = 0x88
    _Bool haveBuiltRequestHeaders;	// 144 = 0x90
    NSDictionary *responseHeaders;	// 152 = 0x98
    NSMutableArray *requestCookies;	// 160 = 0xa0
    NSArray *responseCookies;	// 168 = 0xa8
    _Bool useCookiePersistence;	// 176 = 0xb0
    _Bool useKeychainPersistence;	// 177 = 0xb1
    _Bool useSessionPersistence;	// 178 = 0xb2
    _Bool allowCompressedResponse;	// 179 = 0xb3
    _Bool shouldCompressRequestBody;	// 180 = 0xb4
    NSString *downloadDestinationPath;	// 184 = 0xb8
    NSString *temporaryFileDownloadPath;	// 192 = 0xc0
    NSString *temporaryUncompressedDataDownloadPath;	// 200 = 0xc8
    NSOutputStream *fileDownloadOutputStream;	// 208 = 0xd0
    NSOutputStream *inflatedFileDownloadOutputStream;	// 216 = 0xd8
    _Bool complete;	// 224 = 0xe0
    _Bool finished;	// 225 = 0xe1
    _Bool cancelled;	// 226 = 0xe2
    NSError *error;	// 232 = 0xe8
    NSString *username;	// 240 = 0xf0
    NSString *password;	// 248 = 0xf8
    NSString *userAgent;	// 256 = 0x100
    NSString *domain;	// 264 = 0x108
    NSString *proxyUsername;	// 272 = 0x110
    NSString *proxyPassword;	// 280 = 0x118
    NSString *proxyDomain;	// 288 = 0x120
    id <ASIProgressDelegate> uploadProgressDelegate;	// 296 = 0x128
    id <ASIProgressDelegate> downloadProgressDelegate;	// 304 = 0x130
    _Bool haveExaminedHeaders;	// 312 = 0x138
    NSMutableData *rawResponseData;	// 320 = 0x140
    struct __CFHTTPMessage *request;	// 328 = 0x148
    NSInputStream *readStream;	// 336 = 0x150
    struct _CFHTTPAuthentication *requestAuthentication;	// 344 = 0x158
    NSDictionary *requestCredentials;	// 352 = 0x160
    int authenticationRetryCount;	// 360 = 0x168
    NSString *authenticationScheme;	// 368 = 0x170
    NSString *authenticationRealm;	// 376 = 0x178
    _Bool shouldPresentAuthenticationDialog;	// 384 = 0x180
    _Bool shouldPresentProxyAuthenticationDialog;	// 385 = 0x181
    struct _CFHTTPAuthentication *proxyAuthentication;	// 392 = 0x188
    NSDictionary *proxyCredentials;	// 400 = 0x190
    int proxyAuthenticationRetryCount;	// 408 = 0x198
    NSString *proxyAuthenticationScheme;	// 416 = 0x1a0
    NSString *proxyAuthenticationRealm;	// 424 = 0x1a8
    int responseStatusCode;	// 432 = 0x1b0
    NSString *responseStatusMessage;	// 440 = 0x1b8
    unsigned long long contentLength;	// 448 = 0x1c0
    unsigned long long partialDownloadSize;	// 456 = 0x1c8
    unsigned long long postLength;	// 464 = 0x1d0
    unsigned long long totalBytesRead;	// 472 = 0x1d8
    unsigned long long totalBytesSent;	// 480 = 0x1e0
    unsigned long long lastBytesRead;	// 488 = 0x1e8
    unsigned long long lastBytesSent;	// 496 = 0x1f0
    NSRecursiveLock *cancelledLock;	// 504 = 0x1f8
    SEL didStartSelector;	// 512 = 0x200
    SEL didReceiveResponseHeadersSelector;	// 520 = 0x208
    SEL willRedirectSelector;	// 528 = 0x210
    SEL didFinishSelector;	// 536 = 0x218
    SEL didFailSelector;	// 544 = 0x220
    SEL didReceiveDataSelector;	// 552 = 0x228
    NSDate *lastActivityTime;	// 560 = 0x230
    double timeOutSeconds;	// 568 = 0x238
    _Bool shouldResetUploadProgress;	// 576 = 0x240
    _Bool shouldResetDownloadProgress;	// 577 = 0x241
    ASIHTTPRequest *mainRequest;	// 584 = 0x248
    _Bool showAccurateProgress;	// 592 = 0x250
    _Bool updatedProgress;	// 593 = 0x251
    _Bool haveBuiltPostBody;	// 594 = 0x252
    unsigned long long uploadBufferSize;	// 600 = 0x258
    unsigned long long defaultResponseEncoding;	// 608 = 0x260
    unsigned long long responseEncoding;	// 616 = 0x268
    _Bool allowResumeForFileDownloads;	// 624 = 0x270
    NSDictionary *userInfo;	// 632 = 0x278
    long long tag;	// 640 = 0x280
    _Bool useHTTPVersionOne;	// 648 = 0x288
    _Bool shouldRedirect;	// 649 = 0x289
    _Bool needsRedirect;	// 650 = 0x28a
    int redirectCount;	// 652 = 0x28c
    _Bool validatesSecureCertificate;	// 656 = 0x290
    struct __SecIdentity *clientCertificateIdentity;	// 664 = 0x298
    NSArray *clientCertificates;	// 672 = 0x2a0
    NSString *proxyHost;	// 680 = 0x2a8
    int proxyPort;	// 688 = 0x2b0
    NSString *proxyType;	// 696 = 0x2b8
    NSURL *PACurl;	// 704 = 0x2c0
    int authenticationNeeded;	// 712 = 0x2c8
    _Bool shouldPresentCredentialsBeforeChallenge;	// 716 = 0x2cc
    _Bool inProgress;	// 717 = 0x2cd
    _Bool readStreamIsScheduled;	// 718 = 0x2ce
    int numberOfTimesToRetryOnTimeout;	// 720 = 0x2d0
    int retryCount;	// 724 = 0x2d4
    _Bool willRetryRequest;	// 728 = 0x2d8
    _Bool shouldAttemptPersistentConnection;	// 729 = 0x2d9
    double persistentConnectionTimeoutSeconds;	// 736 = 0x2e0
    _Bool connectionCanBeReused;	// 744 = 0x2e8
    NSMutableDictionary *connectionInfo;	// 752 = 0x2f0
    _Bool shouldUseRFC2616RedirectBehaviour;	// 760 = 0x2f8
    _Bool downloadComplete;	// 761 = 0x2f9
    NSNumber *requestID;	// 768 = 0x300
    NSString *runLoopMode;	// 776 = 0x308
    NSTimer *statusTimer;	// 784 = 0x310
    id <ASICacheDelegate> downloadCache;	// 792 = 0x318
    int cachePolicy;	// 800 = 0x320
    int cacheStoragePolicy;	// 804 = 0x324
    _Bool didUseCachedResponse;	// 808 = 0x328
    double secondsToCache;	// 816 = 0x330
    _Bool shouldContinueWhenAppEntersBackground;	// 824 = 0x338
    unsigned long long backgroundTask;	// 832 = 0x340
    ASIDataDecompressor *dataDecompressor;	// 840 = 0x348
    _Bool shouldWaitToInflateCompressedResponses;	// 848 = 0x350
    _Bool isPACFileRequest;	// 849 = 0x351
    ASIHTTPRequest *PACFileRequest;	// 856 = 0x358
    NSInputStream *PACFileReadStream;	// 864 = 0x360
    NSMutableData *PACFileData;	// 872 = 0x368
    _Bool isSynchronous;	// 880 = 0x370
    CDUnknownBlockType startedBlock;	// 888 = 0x378
    CDUnknownBlockType headersReceivedBlock;	// 896 = 0x380
    CDUnknownBlockType completionBlock;	// 904 = 0x388
    CDUnknownBlockType failureBlock;	// 912 = 0x390
    CDUnknownBlockType bytesReceivedBlock;	// 920 = 0x398
    CDUnknownBlockType bytesSentBlock;	// 928 = 0x3a0
    CDUnknownBlockType downloadSizeIncrementedBlock;	// 936 = 0x3a8
    CDUnknownBlockType uploadSizeIncrementedBlock;	// 944 = 0x3b0
    CDUnknownBlockType dataReceivedBlock;	// 952 = 0x3b8
    CDUnknownBlockType authenticationNeededBlock;	// 960 = 0x3c0
    CDUnknownBlockType proxyAuthenticationNeededBlock;	// 968 = 0x3c8
    CDUnknownBlockType requestRedirectedBlock;	// 976 = 0x3d0
    _Bool _haveReceiveResponse;	// 984 = 0x3d8
    _Bool _haveReceiveFirstData;	// 985 = 0x3d9
    _Bool _haveResponseFinish;	// 986 = 0x3da
    NSDate *_requestBeginDate;	// 992 = 0x3e0
    NSDate *_hostResolveBeginDate;	// 1000 = 0x3e8
    NSDate *_connetionBeginDate;	// 1008 = 0x3f0
    NSDate *_streamOpenDate;	// 1016 = 0x3f8
    NSDate *_streamAvaibleDate;	// 1024 = 0x400
    NSDate *_streamFinishedDate;	// 1032 = 0x408
    NSDate *_downLoadDataBeginDate;	// 1040 = 0x410
    NSDate *_downLoadDataEndDate;	// 1048 = 0x418
}

+ (void)parseMimeType:(id *)arg1 andResponseEncoding:(unsigned long long *)arg2 fromContentType:(id)arg3;
+ (id)dateFromRFC1123String:(id)arg1;
+ (id)base64forData:(id)arg1;
+ (_Bool)isMultitaskingSupported;
+ (void)runRequests;
+ (id)threadForRequest:(id)arg1;
+ (void)hideNetworkActivityIndicatorIfNeeeded;
+ (void)hideNetworkActivityIndicatorAfterDelay;
+ (void)hideNetworkActivityIndicator;
+ (void)showNetworkActivityIndicator;
+ (void)setShouldUpdateNetworkActivityIndicator:(_Bool)arg1;
+ (_Bool)isNetworkInUse;
+ (id)defaultCache;
+ (void)setDefaultCache:(id)arg1;
+ (id)sharedQueue;
+ (void)reachabilityChanged:(id)arg1;
+ (_Bool)isNetworkReachableViaWWAN;
+ (void)unsubscribeFromNetworkReachabilityNotifications;
+ (void)registerForNetworkReachabilityNotifications;
+ (void)throttleBandwidthForWWANUsingLimit:(unsigned long long)arg1;
+ (void)setShouldThrottleBandwidthForWWAN:(_Bool)arg1;
+ (unsigned long long)maxUploadReadLength;
+ (void)measureBandwidthUsage;
+ (unsigned long long)averageBandwidthUsedPerSecond;
+ (void)recordBandwidthUsage;
+ (void)incrementBandwidthUsedInLastSecond:(unsigned long long)arg1;
+ (void)setMaxBandwidthPerSecond:(unsigned long long)arg1;
+ (unsigned long long)maxBandwidthPerSecond;
+ (_Bool)isBandwidthThrottled;
+ (id)mimeTypeForFileAtPath:(id)arg1;
+ (void)setDefaultUserAgentString:(id)arg1;
+ (id)defaultUserAgentString;
+ (void)clearSession;
+ (void)addSessionCookie:(id)arg1;
+ (void)setSessionCookies:(id)arg1;
+ (id)sessionCookies;
+ (void)removeCredentialsForProxy:(id)arg1 port:(int)arg2 realm:(id)arg3;
+ (void)removeCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (id)savedCredentialsForProxy:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (id)savedCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (void)saveCredentials:(id)arg1 forProxy:(id)arg2 port:(int)arg3 realm:(id)arg4;
+ (void)saveCredentials:(id)arg1 forHost:(id)arg2 port:(int)arg3 protocol:(id)arg4 realm:(id)arg5;
+ (void)removeAuthenticationCredentialsFromSessionStore:(id)arg1;
+ (void)removeProxyAuthenticationCredentialsFromSessionStore:(id)arg1;
+ (void)storeAuthenticationCredentialsInSessionStore:(id)arg1;
+ (void)storeProxyAuthenticationCredentialsInSessionStore:(id)arg1;
+ (id)sessionCredentialsStore;
+ (id)sessionProxyCredentialsStore;
+ (void)setDefaultTimeOutSeconds:(double)arg1;
+ (double)defaultTimeOutSeconds;
+ (void)expirePersistentConnections;
+ (_Bool)removeFileAtPath:(id)arg1 error:(id *)arg2;
+ (void)updateProgressIndicator:(id *)arg1 withProgress:(unsigned long long)arg2 ofTotal:(unsigned long long)arg3;
+ (void)performInvocation:(id)arg1 onTarget:(id *)arg2 releasingObject:(id)arg3;
+ (void)performSelector:(SEL)arg1 onTarget:(id *)arg2 withObject:(id)arg3 amount:(void *)arg4 callerToRetain:(id)arg5;
+ (void)releaseBlocks:(id)arg1;
+ (id)requestWithURL:(id)arg1 usingCache:(id)arg2 andCachePolicy:(int)arg3;
+ (id)requestWithURL:(id)arg1 usingCache:(id)arg2;
+ (id)requestWithURL:(id)arg1;
+ (void)initialize;
+ (void)decreaseWholeProcessReferCount;
+ (void)increaseWholeProcessReferCount;
+ (long long)wholeProcessReferCount;
+ (void)decreaseStreamEndReferCount;
+ (void)increaseStreamEndReferCount;
+ (long long)streamEndReferCount;
+ (void)decreaseStreamByteAvailableReferCount;
+ (void)increaseStreamByteAvailableReferCount;
+ (long long)streamByteAvailableReferCount;
+ (void)decreaseStreamOpenReferCount;
+ (void)increaseStreamOpenReferCount;
+ (long long)streamOpenReferCount;
@property(nonatomic) _Bool haveResponseFinish; // @synthesize haveResponseFinish=_haveResponseFinish;
@property(nonatomic) _Bool haveReceiveFirstData; // @synthesize haveReceiveFirstData=_haveReceiveFirstData;
@property(nonatomic) _Bool haveReceiveResponse; // @synthesize haveReceiveResponse=_haveReceiveResponse;
@property(retain, nonatomic) NSDate *downLoadDataEndDate; // @synthesize downLoadDataEndDate=_downLoadDataEndDate;
@property(retain, nonatomic) NSDate *downLoadDataBeginDate; // @synthesize downLoadDataBeginDate=_downLoadDataBeginDate;
@property(retain, nonatomic) NSDate *streamFinishedDate; // @synthesize streamFinishedDate=_streamFinishedDate;
@property(retain, nonatomic) NSDate *streamAvaibleDate; // @synthesize streamAvaibleDate=_streamAvaibleDate;
@property(retain, nonatomic) NSDate *streamOpenDate; // @synthesize streamOpenDate=_streamOpenDate;
@property(retain, nonatomic) NSDate *connetionBeginDate; // @synthesize connetionBeginDate=_connetionBeginDate;
@property(retain, nonatomic) NSDate *hostResolveBeginDate; // @synthesize hostResolveBeginDate=_hostResolveBeginDate;
@property(retain, nonatomic) NSDate *requestBeginDate; // @synthesize requestBeginDate=_requestBeginDate;
@property(nonatomic, setter=setSynchronous:) _Bool isSynchronous; // @synthesize isSynchronous;
@property(retain, nonatomic) NSMutableData *PACFileData; // @synthesize PACFileData;
@property(retain, nonatomic) NSInputStream *PACFileReadStream; // @synthesize PACFileReadStream;
@property(retain, nonatomic) ASIHTTPRequest *PACFileRequest; // @synthesize PACFileRequest;
@property(nonatomic) _Bool isPACFileRequest; // @synthesize isPACFileRequest;
@property _Bool shouldWaitToInflateCompressedResponses; // @synthesize shouldWaitToInflateCompressedResponses;
@property(retain) ASIDataDecompressor *dataDecompressor; // @synthesize dataDecompressor;
@property _Bool shouldContinueWhenAppEntersBackground; // @synthesize shouldContinueWhenAppEntersBackground;
@property(retain, nonatomic) NSURL *redirectURL; // @synthesize redirectURL;
@property(retain) NSArray *clientCertificates; // @synthesize clientCertificates;
@property double secondsToCache; // @synthesize secondsToCache;
@property _Bool didUseCachedResponse; // @synthesize didUseCachedResponse;
@property int cacheStoragePolicy; // @synthesize cacheStoragePolicy;
@property int cachePolicy; // @synthesize cachePolicy;
@property id <ASICacheDelegate> downloadCache; // @synthesize downloadCache;
@property(retain, nonatomic) NSTimer *statusTimer; // @synthesize statusTimer;
@property(nonatomic) NSString *runLoopMode; // @synthesize runLoopMode;
@property(retain) NSNumber *requestID; // @synthesize requestID;
@property(nonatomic) _Bool downloadComplete; // @synthesize downloadComplete;
@property _Bool shouldUseRFC2616RedirectBehaviour; // @synthesize shouldUseRFC2616RedirectBehaviour;
@property(nonatomic) _Bool readStreamIsScheduled; // @synthesize readStreamIsScheduled;
@property(retain, nonatomic) NSInputStream *readStream; // @synthesize readStream;
@property(retain, nonatomic) NSMutableDictionary *connectionInfo; // @synthesize connectionInfo;
@property _Bool connectionCanBeReused; // @synthesize connectionCanBeReused;
@property double persistentConnectionTimeoutSeconds; // @synthesize persistentConnectionTimeoutSeconds;
@property _Bool shouldAttemptPersistentConnection; // @synthesize shouldAttemptPersistentConnection;
@property _Bool willRetryRequest; // @synthesize willRetryRequest;
@property int retryCount; // @synthesize retryCount;
@property int numberOfTimesToRetryOnTimeout; // @synthesize numberOfTimesToRetryOnTimeout;
@property _Bool inProgress; // @synthesize inProgress;
@property _Bool haveBuiltRequestHeaders; // @synthesize haveBuiltRequestHeaders;
@property _Bool shouldPresentCredentialsBeforeChallenge; // @synthesize shouldPresentCredentialsBeforeChallenge;
@property(retain) NSString *responseStatusMessage; // @synthesize responseStatusMessage;
@property int authenticationNeeded; // @synthesize authenticationNeeded;
@property _Bool shouldPresentProxyAuthenticationDialog; // @synthesize shouldPresentProxyAuthenticationDialog;
@property _Bool shouldPresentAuthenticationDialog; // @synthesize shouldPresentAuthenticationDialog;
@property(retain) NSString *proxyAuthenticationScheme; // @synthesize proxyAuthenticationScheme;
@property(retain) NSString *authenticationScheme; // @synthesize authenticationScheme;
@property(retain) NSURL *PACurl; // @synthesize PACurl;
@property(retain) NSString *proxyType; // @synthesize proxyType;
@property int proxyPort; // @synthesize proxyPort;
@property(retain) NSString *proxyHost; // @synthesize proxyHost;
@property(retain) NSDictionary *proxyCredentials; // @synthesize proxyCredentials;
@property _Bool shouldCompressRequestBody; // @synthesize shouldCompressRequestBody;
@property(nonatomic) int redirectCount; // @synthesize redirectCount;
@property(nonatomic) _Bool needsRedirect; // @synthesize needsRedirect;
@property _Bool validatesSecureCertificate; // @synthesize validatesSecureCertificate;
@property _Bool shouldRedirect; // @synthesize shouldRedirect;
@property(nonatomic) _Bool updatedProgress; // @synthesize updatedProgress;
@property int proxyAuthenticationRetryCount; // @synthesize proxyAuthenticationRetryCount;
@property int authenticationRetryCount; // @synthesize authenticationRetryCount;
@property(retain, nonatomic) NSOutputStream *inflatedFileDownloadOutputStream; // @synthesize inflatedFileDownloadOutputStream;
@property(retain, nonatomic) NSOutputStream *fileDownloadOutputStream; // @synthesize fileDownloadOutputStream;
@property(nonatomic) _Bool haveBuiltPostBody; // @synthesize haveBuiltPostBody;
@property(retain) NSRecursiveLock *cancelledLock; // @synthesize cancelledLock;
@property(nonatomic) unsigned long long lastBytesSent; // @synthesize lastBytesSent;
@property(nonatomic) unsigned long long lastBytesRead; // @synthesize lastBytesRead;
@property _Bool useHTTPVersionOne; // @synthesize useHTTPVersionOne;
@property _Bool didCreateTemporaryPostDataFile; // @synthesize didCreateTemporaryPostDataFile;
@property _Bool shouldStreamPostDataFromDisk; // @synthesize shouldStreamPostDataFromDisk;
@property(retain, nonatomic) NSInputStream *postBodyReadStream; // @synthesize postBodyReadStream;
@property(retain, nonatomic) NSOutputStream *postBodyWriteStream; // @synthesize postBodyWriteStream;
@property(retain, nonatomic) NSString *compressedPostBodyFilePath; // @synthesize compressedPostBodyFilePath;
@property(retain) NSString *postBodyFilePath; // @synthesize postBodyFilePath;
@property long long tag; // @synthesize tag;
@property(retain) NSDictionary *userInfo; // @synthesize userInfo;
@property _Bool allowResumeForFileDownloads; // @synthesize allowResumeForFileDownloads;
@property _Bool allowCompressedResponse; // @synthesize allowCompressedResponse;
@property unsigned long long responseEncoding; // @synthesize responseEncoding;
@property unsigned long long defaultResponseEncoding; // @synthesize defaultResponseEncoding;
@property(nonatomic) unsigned long long uploadBufferSize; // @synthesize uploadBufferSize;
@property _Bool showAccurateProgress; // @synthesize showAccurateProgress;
@property unsigned long long totalBytesSent; // @synthesize totalBytesSent;
@property unsigned long long totalBytesRead; // @synthesize totalBytesRead;
@property ASIHTTPRequest *mainRequest; // @synthesize mainRequest;
@property _Bool shouldResetUploadProgress; // @synthesize shouldResetUploadProgress;
@property _Bool shouldResetDownloadProgress; // @synthesize shouldResetDownloadProgress;
@property unsigned long long postLength; // @synthesize postLength;
@property unsigned long long partialDownloadSize; // @synthesize partialDownloadSize;
@property unsigned long long contentLength; // @synthesize contentLength;
@property(retain, nonatomic) NSData *compressedPostBody; // @synthesize compressedPostBody;
@property(retain) NSMutableData *postBody; // @synthesize postBody;
@property double timeOutSeconds; // @synthesize timeOutSeconds;
@property(retain, nonatomic) NSDate *lastActivityTime; // @synthesize lastActivityTime;
@property(retain) NSMutableData *rawResponseData; // @synthesize rawResponseData;
@property int responseStatusCode; // @synthesize responseStatusCode;
@property(retain) NSDictionary *requestCredentials; // @synthesize requestCredentials;
@property(retain) NSMutableArray *requestCookies; // @synthesize requestCookies;
@property(retain) NSArray *responseCookies; // @synthesize responseCookies;
@property(retain) NSDictionary *responseHeaders; // @synthesize responseHeaders;
@property(retain) NSMutableDictionary *requestHeaders; // @synthesize requestHeaders;
@property _Bool complete; // @synthesize complete;
@property(retain) NSError *error; // @synthesize error;
@property(retain) NSString *proxyAuthenticationRealm; // @synthesize proxyAuthenticationRealm;
@property(retain) NSString *authenticationRealm; // @synthesize authenticationRealm;
@property SEL didReceiveDataSelector; // @synthesize didReceiveDataSelector;
@property SEL didFailSelector; // @synthesize didFailSelector;
@property SEL didFinishSelector; // @synthesize didFinishSelector;
@property SEL willRedirectSelector; // @synthesize willRedirectSelector;
@property SEL didReceiveResponseHeadersSelector; // @synthesize didReceiveResponseHeadersSelector;
@property SEL didStartSelector; // @synthesize didStartSelector;
@property(retain) NSString *temporaryUncompressedDataDownloadPath; // @synthesize temporaryUncompressedDataDownloadPath;
@property(retain) NSString *temporaryFileDownloadPath; // @synthesize temporaryFileDownloadPath;
@property(retain) NSString *downloadDestinationPath; // @synthesize downloadDestinationPath;
@property _Bool useCookiePersistence; // @synthesize useCookiePersistence;
@property _Bool useSessionPersistence; // @synthesize useSessionPersistence;
@property _Bool useKeychainPersistence; // @synthesize useKeychainPersistence;
@property(retain) NSURL *originalURL; // @synthesize originalURL;
@property(retain) NSString *proxyDomain; // @synthesize proxyDomain;
@property(retain) NSString *proxyPassword; // @synthesize proxyPassword;
@property(retain) NSString *proxyUsername; // @synthesize proxyUsername;
@property(retain) NSString *domain; // @synthesize domain;
@property(retain) NSString *userAgent; // @synthesize userAgent;
@property(retain) NSString *password; // @synthesize password;
@property(retain) NSString *username; // @synthesize username;
- (void)setRequestRedirectedBlock:(CDUnknownBlockType)arg1;
- (void)setProxyAuthenticationNeededBlock:(CDUnknownBlockType)arg1;
- (void)setAuthenticationNeededBlock:(CDUnknownBlockType)arg1;
- (void)setDataReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setUploadSizeIncrementedBlock:(CDUnknownBlockType)arg1;
- (void)setDownloadSizeIncrementedBlock:(CDUnknownBlockType)arg1;
- (void)setBytesSentBlock:(CDUnknownBlockType)arg1;
- (void)setBytesReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setFailedBlock:(CDUnknownBlockType)arg1;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
- (void)setHeadersReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setStartedBlock:(CDUnknownBlockType)arg1;
- (void)performThrottling;
- (id)findSessionAuthenticationCredentials;
- (id)findSessionProxyAuthenticationCredentials;
- (void)setClientCertificateIdentity:(struct __SecIdentity *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)connectionID;
- (void)finishedDownloadingPACFile:(id)arg1;
- (void)runPACScript:(id)arg1;
- (void)timeOutPACRead;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (void)fetchPACFile;
- (_Bool)configureProxies;
- (_Bool)removeTemporaryCompressedUploadFile;
- (_Bool)removeTemporaryUploadFile;
- (_Bool)removeTemporaryUncompressedDownloadFile;
- (_Bool)removeTemporaryDownloadFile;
- (void)unscheduleReadStream;
- (void)scheduleReadStream;
- (void)destroyReadStream;
- (void)handleStreamError;
- (_Bool)retryUsingNewConnection;
- (void)useDataFromCache;
- (void)markAsFinished;
- (void)handleStreamComplete;
- (void)handleBytesAvailable;
- (_Bool)willAskDelegateToConfirmRedirect;
- (void)handleNetworkEvent:(unsigned long long)arg1;
- (void)addBasicAuthenticationHeaderWithUsername:(id)arg1 andPassword:(id)arg2;
- (void)attemptToApplyCredentialsAndResume;
- (_Bool)showAuthenticationDialog;
- (void)attemptToApplyProxyCredentialsAndResume;
- (void)askDelegateForCredentials;
- (_Bool)willAskDelegateForCredentials;
- (void)askDelegateForProxyCredentials;
- (_Bool)willAskDelegateForProxyCredentials;
- (_Bool)showProxyAuthenticationDialog;
- (void)failAuthentication;
- (void)cancelAuthentication;
- (void)retryUsingSuppliedCredentials;
- (id)findCredentials;
- (id)findProxyCredentials;
- (_Bool)applyCredentials:(id)arg1;
- (_Bool)applyProxyCredentials:(id)arg1;
- (void)saveCredentialsToKeychain:(id)arg1;
- (void)saveProxyCredentialsToKeychain:(id)arg1;
- (void)parseStringEncodingFromHeaders;
- (_Bool)willRedirect;
- (void)readResponseHeaders;
- (void)failWithError:(id)arg1;
- (void)passOnReceivedData:(id)arg1;
- (void)reportFailure;
- (void)reportFinished;
- (void)requestFinished;
- (void)requestWillRedirectToURL:(id)arg1;
- (void)requestReceivedResponseHeaders:(id)arg1;
- (void)requestRedirected;
- (void)requestStarted;
- (void)callBlock:(CDUnknownBlockType)arg1;
- (void)performBlockOnMainThread:(CDUnknownBlockType)arg1;
- (void)removeUploadProgressSoFar;
- (void)incrementUploadSizeBy:(long long)arg1;
- (void)incrementDownloadSizeBy:(long long)arg1;
- (void)updateUploadProgress;
- (void)updateDownloadProgress;
@property(nonatomic) id downloadProgressDelegate; // @synthesize downloadProgressDelegate;
@property(nonatomic) id uploadProgressDelegate; // @synthesize uploadProgressDelegate;
- (void)updateProgressIndicators;
- (id)HEADRequest;
- (void)cancelLoad;
- (void)checkRequestStatus;
- (_Bool)shouldTimeOut;
- (void)redirectToURL:(id)arg1;
- (void)performRedirect;
- (void)updateStatus:(id)arg1;
- (void)startRequest;
- (void)updatePartialDownloadSize;
- (void)buildRequestHeaders;
- (void)applyCookieHeader;
- (void)applyAuthorizationHeader;
- (void)main;
- (_Bool)isExecuting;
- (_Bool)isFinished;
- (_Bool)isConcurrent;
- (void)startAsynchronous;
- (void)start;
- (void)startSynchronous;
- (id)responseData;
- (_Bool)isResponseCompressed;
- (id)responseString;
- (_Bool)isCancelled;
- (void)clearDelegatesAndCancel;
- (void)cancel;
- (void)cancelOnRequestThread;
@property(retain, nonatomic) id queue; // @synthesize queue;
@property(nonatomic) id delegate; // @synthesize delegate;
@property(retain, nonatomic, setter=setURL:) NSURL *url; // @synthesize url;
@property(retain, nonatomic) NSString *requestMethod; // @synthesize requestMethod;
- (void)appendPostDataFromFile:(id)arg1;
- (void)appendPostData:(id)arg1;
- (void)setupPostBody;
- (void)buildPostBody;
- (void)addRequestHeader:(id)arg1 value:(id)arg2;
- (void)releaseBlocksOnMainThread;
- (void)dealloc;
- (id)initWithURL:(id)arg1;

@end

